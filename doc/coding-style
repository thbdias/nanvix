
                          THE NANVIX CODING STYLE

This is a short document describing the preferred coding style for the 
Nanvix project.

==================
I. Indentation
==================

 * Indentation should be 4 characters long and use tab characters.
 
 * Do not user spaces for indentation.

 * In switch statements, 'case' labels should be indented:

	switch (ch)
	{
		case 'a':
		case 'b':
			foo = bar;
			break;
		case 'c':
		case 'd':
			/* fall through */
		default:
			break;
	}

 * Don't put multiple statements on a single line.
 
 * Don't put multiple assignments on a single line either.

===========================
II. Breaking Long Lines
===========================

 * The limit on the length of lines is 80 columns and this is a
   strongly preferred limit.
  
 * If the line would overflow 80 columns, break it in two, aligning the
   second line to the right.

=================================
III. Placing Braces and Spaces
=================================

 * For if-else, for, do-while, while, switch etc, place the
   opening brace on the next line:
   
	if (x is true)
	{
		/* code goes here. */
	}
	
	else
	{
		/* other code goes here. */
	}

 * For functions, place the opening brace on the next line:
 
	int foo(void)
	{
		/* code goes here. */
	}

 * Do not unnecessarily use braces where a single statement will do.

=============
IV. Spaces
=============

 * Use a space after these keywords: if, switch, case, for, do, while.
 
 * Do not add spaces around (inside) parenthesized expressions.
 
 * When declaring pointer data or a function that returns a pointer type,
   the preferred use of '*' is adjacent to the data name or function name 
   and not adjacent to the type name.
   
 * Use one space around (on each side of) most binary and ternary operators,
   such as any of these:
   
	=  +  -  <  >  *  /  %  |  &  ^  <=  >=  ==  !=  ?  :
	
   But no space after unary operators:
   
	&  *  +  -  ~  !  sizeof

   No space after/before the postfix increment & decrement unary operators:
   
	++  --

==========================
V. Variables and Naming
==========================

 * Do not use mixed-cases to name your variables.
 
 * Do not encode the type of a function into the name.
 
 * Do not use typedef's, unless you want to cast an opaque pointer.
 
 * Don't mix variable declaration with your code. Declare you variables at
   the very beginning of the scope of that variable.

=================
VI. Commenting
=================

 * Use /* c89 */ comments in all situations.
 
 * Try documenting everything that you code using the Doxygen syntax.
