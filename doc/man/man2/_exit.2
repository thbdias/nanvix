.\" 
.\" Copyright(C) 2011-2015 Pedro H. Penna <pedrohenriquepenna@gmail.com>
.\" 
.\" This file is part of Nanvix.
.\" 
.\" Nanvix is free software: you can redistribute it and/or modify
.\" it under the terms of the GNU General Public License as published by
.\" the Free Software Foundation, either version 3 of the License, or
.\" (at your option) any later version.
.\" 
.\" Nanvix is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\" 
.\" You should have received a copy of the GNU General Public License
.\" along with Nanvix.  If not, see <http://www.gnu.org/licenses/>.
.\"

.TH "_exit" "2" "April 2015" "Nanvix" "The Nanvix Programmer's Manual"

.\ "============================================================================

.SH "NAME"

_Exit, _exit \- Terminate the calling process

.\ "============================================================================

.SH "SYNOPSIS"

.BI "#include <" "stdlib.h" >

.BI "void _Exit(int " status ");"

.BI "#include <" "unistd.h" >

.BI "void _exit(int " status ");"

.\ "============================================================================

.SH "DESCRIPTION"

The 
.BR _Exit()
and
.BR _exit()
terminate the calling process. These functions do not call functions registered
with
.BR atexit()
nor any registered signal handlers.
Open streams are not flushed. Whether open streams are closed (without flushing)
is implementation-defined. Finally, the calling process is terminated with the
consequences described below.

The
.BR _Exit()
and
.BR _exit()
functions are functionally equivalent.

The value of
.IR status
may be 0,
.BR EXIT_SUCCESS ,
.BR EXIT_FAILURE ,
or any other value, though only the least significant 8 bits are available to a
waiting parent process.


.\ "============================================================================

.SH "CONSEQUENCES OF PROCESS TERMINATION"

Process termination caused by any reason have the following consequences:

.IP \[bu] 2
All of the file descriptors, directory streams, conversion descriptors, and
message catalog descriptors open in the calling process are closed.
.IP \[bu]
If the parent process of the calling process is executing a
.BR wait() ,
.BR waitid() ,
or
.BR waitpid() ,
it is notified of termination of the calling process and the low-order eight
bits (that is, bits 0377) of
.BR status
are made available to it. If the parent is not waiting, the child's status
are made available to it when the parent subsequently executes
.BR wait() ,
.BR waitid() ,
or
.BR waitpid() .
.IP \[bu]
If the parent process of the calling process is not executing a
.BR wait() ,
.BR waitid() ,
or
.BR waitpid() ,
the calling process is transformed into a zombie process. A zombie process is
an inactive process and it is deleted at some later time when its parent
process executes
.BR wait() ,
.BR waitid() ,
or
.BR waitpid() .
.IP \[bu]
Termination of a process does not directly terminate its children. The sending
of a
.BR SIGHUP
signal as described below indirectly terminates children in some circumstances.
.IP \[bu]
If the implementation supports the
.BR SIGCHLD
signal, a
.BR SIGCHLD
is sent to the parent process.
.IP \[bu]
The parent process ID of all of the existing child processes and zombie
processes of the calling process is set to the process ID of an
implementation-defined system process. That is, these processes is inherited by
a special system process.
.IP \[bu]
If the process is a controlling process, the
.BR SIGHUP
signal is sent to each process in the foreground process group of the
controlling terminal belonging to the calling process.
.IP \[bu]
If the process is a controlling process, the controlling terminal associated
with the session is disassociated from the session, allowing it to be acquired
by a new controlling process.
.IP \[bu]
If the exit of the process causes a process group to become orphaned, and if
any member of the newly-orphaned process group is stopped, then a
.BR SIGHUP
signal followed by a
.BR SIGCONT
signal is sent to each process in the newly-orphaned process group.
.IP \[bu]
Any outstanding cancelable asynchronous I/O operations may be canceled.
Those asynchronous I/O operations that are not canceled are complete as if the
.BR _Exit()
or
.BR _exit()
operation had not yet occurred, but any associated signal notifications are
suppressed. The
.BR _Exit()
or
.BR _exit()
operation may block awaiting such I/O completion. Whether any I/O is canceled,
and which I/O may be canceled upon
.BR _Exit()
or
.BR _exit() ,
is implementation-defined.

.\ "============================================================================

.SH "RETURN VALUE"

These functions do not return.

.\ "============================================================================

.SH "ERRORS"

No errors are defined.

.\ "============================================================================

.SH "CONFORMING TO"

POSIX.1-2008

.\ "============================================================================

.SH "AUTHOR"
Pedro H. Penna <pedrohenriquepenna@gmail.com>

.\ "============================================================================

.SH "SEE ALSO"

.BR setpgid(2) ,
.BR setsid(2) ,
.BR wait(2) ,
.BR waitid(2) ,
.BR atexit(3) ,
.BR exit(3)
