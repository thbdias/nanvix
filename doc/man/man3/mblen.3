.\" 
.\" Copyright(C) 2011-2015 Pedro H. Penna <pedrohenriquepenna@gmail.com>
.\" 
.\" This file is part of Nanvix.
.\" 
.\" Nanvix is free software: you can redistribute it and/or modify
.\" it under the terms of the GNU General Public License as published by
.\" the Free Software Foundation, either version 3 of the License, or
.\" (at your option) any later version.
.\" 
.\" Nanvix is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\" 
.\" You should have received a copy of the GNU General Public License
.\" along with Nanvix.  If not, see <http://www.gnu.org/licenses/>.
.\"

.TH "mblen" "3" "April 2015" "Nanvix" "The Nanvix Programmer's Manual"

.\ "============================================================================

.SH "NAME"

mblen \- Gets number of bytes in a character

.\ "============================================================================

.SH "SYNOPSIS"

.BI "#include <" "stdlib.h" >

.BI "int mblen(const char *" s ", size_t " n ");"

.\ "============================================================================

.SH "DESCRIPTION"

If
.IR s
is not a null pointer,
.BR mblen()
determines the number of bytes constituting the character pointed to by
.IR s .
Except that the shift state of
.BR mbtowc()
is not affected, it is equivalent to:

.BI "mbtowc((wchar_t *) " 0 ", " s ", " n ");"

The implementation behaves as if no function calls
.BR mblen() .

The behavior of this function is affected by the
.BR LC_CTYPE
category of the current locale. For a state-dependent encoding, this function
is placed into its initial state by a call for which its character pointer
argument,
.IR s ,
is a null pointer. Subsequent calls with
.IR s
as other than a null pointer cause the internal state of the function to be
altered as necessary. A call with
.IR s
as a null pointer causes this function to return a non-zero value if encodings
have state dependency, and 0 otherwise. If the implementation employs special
bytes to change the shift state, these bytes do not produce separate
wide-character codes, but are grouped with an adjacent character. Changing the
.BR LC_CTYPE
category causes the shift state of this function to be unspecified.

The
.BR mblen()
function need is not thread-safe.

.\ "============================================================================

.SH "RETURN VALUE"

If
.IR s
is a null pointer,
.BR mblen()
returns a non-zero or 0 value, if character encodings, respectively, do or do
not have state-dependent encodings. If
.IR s
is not a null pointer,
.BR mblen()
either returns 0 (if
.IR s
points to the null byte), or return the number of bytes that constitute the
character (if the next
.IR n
or fewer bytes form a valid character), or return -1 (if they do not form a
valid character) and set
.IR errno
to indicate the error. In no case the value returned is greater than
.IR n
or the value of the
.BR MB_CUR_MAX
macro.

.\ "============================================================================

.SH "ERRORS"

.TP
.BR EILSEQ
An invalid character sequence is detected.

.\ "============================================================================

.SH "CONFORMING TO"

POSIX.1-2008

.\ "============================================================================

.SH "AUTHOR"
Pedro H. Penna <pedrohenriquepenna@gmail.com>

.\ "============================================================================

.SH "SEE ALSO"

.BR mbtowc(3) ,
.BR mbstowcs(3) ,
.BR wctomb(3) ,
.BR wcstombs(3)
