.\" 
.\" Copyright(C) 2011-2015 Pedro H. Penna <pedrohenriquepenna@gmail.com>
.\" 
.\" This file is part of Nanvix.
.\" 
.\" Nanvix is free software: you can redistribute it and/or modify
.\" it under the terms of the GNU General Public License as published by
.\" the Free Software Foundation, either version 3 of the License, or
.\" (at your option) any later version.
.\" 
.\" Nanvix is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\" 
.\" You should have received a copy of the GNU General Public License
.\" along with Nanvix.  If not, see <http://www.gnu.org/licenses/>.
.\"

.TH "mbtowc" "3" "May 2015" "Nanvix" "The Nanvix Programmer's Manual"

.\ "============================================================================

.SH "NAME"

mbtowc \- Converts a character to a wide-character code

.\ "============================================================================

.SH "SYNOPSIS"

.BI "#include <" "stdlib.h" >

.BI "int mbtowc(wchar_t *restrict " pwc ", const char *restrict " s ", size_t "\
 n ");"

.\ "============================================================================

.SH "DESCRIPTION"

If s is not a null pointer, 
.BR mbtowc()
determines the number of bytes that constitute the character pointed to by
.IR s .
It then determines the wide-character code for the value of type
.BR wchar_t
that corresponds to that character. If the character is valid and 
.IR pwc
is not a null pointer,
.BR mbtowc()
stores the wide-character code in the object pointed to by
.IR pwc .

The behavior of this function is affected by the 
.BR LC_CTYPE 
category of the current locale. For a state-dependent encoding, this function is 
placed into its initial state by a call for which its character pointer argument, 
.IR s , 
is a null pointer. Subsequent calls with
.IR s 
as other than a null pointer causes the 
internal state of the function to be altered as necessary. A call with 
.IR s 
as a null pointer causes this function to return a non-zero value if encodings have 
state dependency, and 0 otherwise. If the implementation employs special bytes to 
change the shift state, these bytes do not produce separate wide-character codes, 
but are grouped with an adjacent character. Changing the 
.BR LC_CTYPE 
category causes the shift state of this function to be unspecified. At most 
.IR n 
bytes of the array pointed to by 
.IR s 
are examined.

The implementation behaves as if no function calls mbtowc().

The mbtowc() function is not thread-safe.

.\ "============================================================================

.SH "RETURN VALUE"

If 
.IR s
is a null pointer, 
.BR mbtowc() 
returns a non-zero or 0 value, if character encodings, respectively, do or do not 
have state-dependent encodings. If 
.IR s 
is not a null pointer, 
.BR mbtowc() 
either returns 0 (if 
.IR s 
points to the null byte), or returns the number of bytes that constitute the 
converted character (if the next 
.IR n 
or fewer bytes form a valid character), or returns -1 and sets errno to indicate 
the error (if they do not form a valid character).

In no case the value returned is greater than 
.IR n 
or the value of the 
.BR MB_CUR_MAX
 macro.

.\ "============================================================================

.SH "ERRORS"

.TP 
.BR EILSEQ
An invalid character sequence is detected.

.\ "============================================================================

.SH "CONFORMING TO"

POSIX.1-2008

.\ "============================================================================

.SH "AUTHOR"
Pedro H. Penna <pedrohenriquepenna@gmail.com>

.\ "============================================================================

.SH "SEE ALSO"

.BR mblen(3), 
.BR mbstowcs(3), 
.BR wctomb(3), 
.BR wcstombs(3)
