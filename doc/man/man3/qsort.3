.\" 
.\" Copyright(C) 2011-2015 Pedro H. Penna <pedrohenriquepenna@gmail.com>
.\" 
.\" This file is part of Nanvix.
.\" 
.\" Nanvix is free software: you can redistribute it and/or modify
.\" it under the terms of the GNU General Public License as published by
.\" the Free Software Foundation, either version 3 of the License, or
.\" (at your option) any later version.
.\" 
.\" Nanvix is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\" 
.\" You should have received a copy of the GNU General Public License
.\" along with Nanvix.  If not, see <http://www.gnu.org/licenses/>.
.\"

.TH "qsort" "3" "May 2015" "Nanvix" "The Nanvix Programmer's Manual"

.\ "============================================================================

.SH "NAME"

qsort \- Sorts a table of data

.\ "============================================================================

.SH "SYNOPSIS"
.nf
.BI "#include <" "stdlib.h" >
.sp
.BI "void qsort(void *" base ", size_t " nmemb ", size_t " size ","
.BI "           int (*" cmp ")(const void *, const void *));" 
.fi
.\ "============================================================================

.SH "DESCRIPTION"

The 
.BR qsort() 
function sorts an array of 
.IR nmenb
objects, the initial element of which is pointed to by 
.IR base . 
The size of each object, in bytes, is specified by the 
.IR size 
argument. If the 
.IR nmemb 
argument has the value zero, the comparison function pointed to by 
.IR cmp 
is not called and no rearrangement takes place.

The application shall ensure that the comparison function pointed to by 
.IR cmp 
does not alter the contents of the array. The implementation may reorder elements of 
the array between calls to the comparison function, but it does not alter the 
contents of any individual element.

When the same objects (consisting of width bytes, irrespective of their current 
positions in the array) are passed more than once to the comparison function, the 
results are consistent with one another. That is, they define a total ordering on 
the array.

The contents of the array are sorted in ascending order according to a comparison 
function. The 
.IR cmp 
argument is a pointer to the comparison function, which is called with two arguments 
that point to the elements being compared. The application shall ensure that the 
function returns an integer less than, equal to, or greater than 0, if the first 
argument is considered respectively less than, equal to, or greater than the second. 
If two members compare as equal, their order in the sorted array is unspecified.

.\ "============================================================================

.SH "RETURN VALUE"

The qsort() function does not return a value.

.\ "============================================================================

.SH "ERRORS"

No errors are defined.

.\ "============================================================================

.SH "CONFORMING TO"

POSIX.1-2008

.\ "============================================================================

.SH "AUTHOR"
Pedro H. Penna <pedrohenriquepenna@gmail.com>

.\ "============================================================================

.SH "SEE ALSO"

.BR bsearch(3)

