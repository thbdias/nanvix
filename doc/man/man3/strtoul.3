.\" 
.\" Copyright(C) 2011-2015 Pedro H. Penna <pedrohenriquepenna@gmail.com>
.\" 
.\" This file is part of Nanvix.
.\" 
.\" Nanvix is free software: you can redistribute it and/or modify
.\" it under the terms of the GNU General Public License as published by
.\" the Free Software Foundation, either version 3 of the License, or
.\" (at your option) any later version.
.\" 
.\" Nanvix is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\" 
.\" You should have received a copy of the GNU General Public License
.\" along with Nanvix.  If not, see <http://www.gnu.org/licenses/>.
.\"

.TH "strtoul" "3" "May 2015" "Nanvix" "The Nanvix Programmer's Manual"

.\ "============================================================================

.SH "NAME"

strtoul, strtoull \- Convert a string to a unsigned long integer

.\ "============================================================================

.SH "SYNOPSIS"
.nf
.BI "#include <" "stdlib.h" >
.sp
.BI "unsigned long strtoul(const char *restrict " str ", char **restrict " endptr ","
.BR "                      int "base ");"
.BI "unsigned long long strtoll(const char *restrict " str ", char **restrict " endptr ","
.BI "                           int " base ");"
.fi
.\ "============================================================================

.SH "DESCRIPTION"

These functions convert the initial portion of the string pointed to by 
.IR str 
to a type unsigned long and unsigned long long representation, respectively. First, they decompose the 
input string into three parts:

.nr step 1 1
.IP \n[step] 3
An initial, possibly empty, sequence of white-space characters (as specified by 
.BR isspace() )
.IP \n+[step]
A subject sequence interpreted as an integer represented in some radix determined 
by the value of 
.IR base
.IP \n+[step]
A final string of one or more unrecognized characters, including the terminating NUL 
character of the input string.
.fi

Then they attempt to convert the subject sequence to an unsigned integer, and return the  result.

If the value of 
.IR base 
is 0, the expected form of the subject sequence is that of a decimal constant, octal 
constant, or hexadecimal constant, any of which may be preceded by a '+' or '-' sign.
A decimal constant begins with a non-zero digit, and consists of a sequence of 
decimal digits. An octal constant consists of the prefix '0' optionally followed by asequence of the digits '0' to '7' only. A hexadecimal constant consists of the 
prefix 0x or 0X followed by a sequence of the decimal digits and letters 'a' (or 'A' 
) to 'f' (or 'F' ) with values 10 to 15 respectively.

If the value of 
.IR base 
is between 2 and 36, the expected form of the subject sequence is a sequence of 
letters and digits representing an integer with the radix specified by base, 
optionally preceded by a '+' or '-' sign. The letters from 'a' (or 'A' ) to 'z' (or 
'Z' ) inclusive are ascribed the values 10 to 35; only letters whose ascribed values 
are less than that of base are permitted. If the value of base is 16, the characters 
0x or 0X may optionally precede the sequence of letters and digits, following the 
sign if present.

The subject sequence is defined as the longest initial subsequence of the input 
string, starting with the first non-white-space character that is of the expected 
form. The subject sequence shall contain no characters if the input string is empty 
or consists entirely of white-space characters, or if the first non-white-space 
character is other than a sign or a permissible letter or digiti.

If the subject sequence has the expected form and the value of base is 0, the 
sequence of characters starting with the first digit shall be interpreted as an 
integer constant. If the subject sequence has the expected form and the value of 
.IR base 
is between 2 and 36, it shall be used as the base for conversion, ascribing to each 
letter its value as given above. If the subject sequence begins with a minus-sign, 
the value resulting from the conversion shall be negated. A pointer to the final 
string shall be stored in the object pointed to by endptr, provided that 
.IR endptr 
is not a null pointer.

If the subject sequence is empty or does not have the expected form, no conversion isperformed; the value of 
.IR str
is stored in the object pointed to by 
.IR endptr , 
provided that 
.IR endptr 
is not a null pointer.

These functions do not change the setting of 
.BR errno 
if successful.

Since 0, 
.BR ULONG_MAX
and
.BR ULLONG_MAX
are returned on error and are also valid returns on success, an application wishing 
to check for error situations should set 
.BR errno 
to 0, then call 
.BR strtoul() 
or 
.BR strtoull() , 
then check 
.BR errno .

.\ "============================================================================

.SH "RETURN VALUE"

Upon successful completion, these functions return the converted value, if any. If 
no conversion could be performed, 0 is returned and 
.BR errno 
may is set to 
.BR EINVAL .

If the value of 
.IR base 
is not supported, 0 is returned and 
.iR errno 
is set to 
.BR EINVAL .

If the correct value is outside the range of representable values, 
.BR ULONG_MAX , 
and 
.BR ULLONG_MAX 
is returned and 
.BR errno 
set to 
.BR ERANGE .

.\ "============================================================================

.SH "ERRORS"

.TP
.BR EINVAL
The value of base is not supported.

.TP 
.BR ERANGE
The value to be returned is not representable.

.TP
.BR EINVAL
No conversion could be performed.

.\ "============================================================================

.SH "CONFORMING TO"

POSIX.1-2008

.\ "============================================================================

.SH "AUTHOR"
Pedro H. Penna <pedrohenriquepenna@gmail.com>

.\ "============================================================================

.SH "SEE ALSO"

.BR fscanf(3) , 
.BR isalpha(3) , 
.BR strtod(3)
